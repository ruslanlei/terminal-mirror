/*
 * Copyright (C) 2002 - 2023 Devexperts LLC
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import{throttleTime as m}from"rxjs/operators";import{merge as g}from"rxjs";import{VIEWPORT_ANIMATION_ID as p}from"../../animation/canvas-animation";import{CanvasElement as h,CHART_UUID as C}from"../../canvas/canvas-bounds-container";import{ChartBaseElement as b}from"../../chart-base-element";import{MainCanvasTouchHandler as T}from"../../inputhandlers/main-canvas-touch.handler";import{pixelsToUnits as c}from"../../model/scaling/viewport.model";import{DragNDropXComponent as P}from"../dran-n-drop_helper/drag-n-drop-x.component";import{DragNDropYComponent as M}from"../dran-n-drop_helper/drag-n-drop-y.component";import{touchpadDetector as A,getTouchpadSensitivity as X,isFirefox as Y}from"../../utils/touchpad.utils";import{deviceDetector as x}from"../../utils/device-detector.utils";export class ChartAreaPanHandler extends b{constructor(t,s,a,i,e,n,o,r){super(),this.bus=t,this.config=s,this.scaleModel=a,this.mainCanvasParent=i,this.canvasInputListener=e,this.canvasBoundsContainer=n,this.canvasAnimation=o,this.chartPanComponent=r,this.currentPoint={x:0,y:0},this.xDraggedCandlesDelta=0,this.lastXStart=0,this.lastYStart=0,this.wheelTrottleTime=15,this.onXDragStart=()=>{this.canvasAnimation.forceStopAnimation(p),this.xDraggedCandlesDelta=0,this.lastXStart=this.scaleModel.xStart},this.onXDragTick=D=>{const{delta:u}=D;this.currentPoint.x=u;const S=c(u,this.scaleModel.zoomX);this.scaleModel.moveXStart(this.lastXStart-S),this.bus.fireDraw()},this.touchHandler=new T(this.scaleModel,this.canvasInputListener,this.mainCanvasParent);const d=this.canvasBoundsContainer.getBoundsHitTest(h.PANE_UUID(C)),f=this.canvasBoundsContainer.getBoundsHitTest(h.ALL_PANES);this.registerChartYPanHandler(this.scaleModel,d);const v=new P(f,{onDragStart:this.onXDragStart,onDragTick:this.onXDragTick},this.canvasInputListener,this.chartPanComponent,{disableChartPanning:!1});this.addChildEntity(v)}doActivate(){super.doActivate();const t=this.canvasBoundsContainer.getBoundsHitTest(h.ALL_PANES);this.addRxSubscription(g(this.canvasInputListener.observeWheel(t),this.canvasInputListener.observePinch(t)).pipe(m(this.wheelTrottleTime)).subscribe(s=>{const a=A(s),i=s.deltaY<0,e=a?X(this.config):this.config.scale.zoomSensitivity;if(this.config.scale.zoomToCursor){const o=this.canvasBoundsContainer.getBounds(h.CANVAS).width,d=s.offsetX/o;this.scaleModel.zoomXToPercent(d,i,!1,e)}else this.scaleModel.zoomXToEnd(i,e);this.bus.fireDraw()})),this.addRxSubscription(this.canvasInputListener.observeScrollGesture().pipe(m(this.wheelTrottleTime)).subscribe(s=>{let a=-1;const i=x();(i==="apple"||i==="mobile")&&(a=1);let e=0,n=0;if(e+=s.deltaX*a,n+=s.deltaY*-a,e!==0){const o=c(e,this.scaleModel.zoomX);this.scaleModel.moveXStart(this.scaleModel.xStart-o)}if(!Y&&n!==0)if(this.scaleModel.state.auto)shouldDisableAutoScale({x:e,y:n},this.scaleModel.state.autoScaleDisableOnDrag)&&this.scaleModel.autoScale(!1);else{const o=c(this.scaleModel.state.inverse?-n:n,this.scaleModel.zoomY);this.scaleModel.moveYStart(this.scaleModel.yStart+o)}this.bus.fireDraw()})),this.touchHandler.activate(),this.addSubscription(this.touchHandler.deactivate.bind(this.touchHandler))}registerChartYPanHandler(t,s){const a=()=>{this.canvasAnimation.forceStopAnimation(p),this.currentPoint={x:0,y:0},this.lastYStart=t.yStart},i=n=>{const{delta:o}=n;if(this.currentPoint.y=o,t.state.auto)shouldDisableAutoScale(this.currentPoint,t.state.autoScaleDisableOnDrag)&&t.autoScale(!1);else{const r=c(t.state.inverse?-o:o,t.zoomY);t.moveYStart(this.lastYStart+r)}},e=new M(s,{onDragTick:i,onDragStart:a},this.canvasInputListener,this.chartPanComponent,{disableChartPanning:!1});return this.addChildEntity(e),e}}export const shouldDisableAutoScale=(l,t)=>{if(!t.enabled)return!1;const s=Math.abs(l.y),a=Math.pow(Math.pow(Math.abs(l.x),2)+Math.pow(s,2),.5),i=Math.abs(Math.acos(s/a));return s>t.yDiff&&i<t.edgeAngle};
