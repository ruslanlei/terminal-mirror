{"version":3,"file":"createBarChart.js","sources":["../../../../../components/barChart/createBarChart.ts"],"sourcesContent":["import {\n  axisBottom,\n  max,\n  range,\n  scaleBand, ScaleLinear,\n  scaleLinear,\n  select,\n  Selection,\n} from 'd3';\nimport {\n  isPositive,\n  multiply, subtract, subtractRight, toAbsolute,\n} from '@terminal/common/utils/number';\nimport { compose } from '@terminal/common/utils/fp';\nimport { toCssPxValue } from '@/utils/style';\nimport { getRectField } from '@/utils/dom';\n\nexport type BarChartDataElement = [string, number];\nexport type BarChartData = BarChartDataElement[];\n\nexport type LabelFormatter = (value: number | string, index: number) => string;\n\nexport interface CreateBarChartProps {\n  container: HTMLElement;\n  data: BarChartData;\n  labelGap?: number;\n  minWidthPerBar?: number;\n  barBorderRadius?: number;\n  topMargin?: number;\n  barLabelFormatter?: LabelFormatter,\n  xAxisLabelFormatter?: LabelFormatter,\n  barNameColor?: string,\n  positiveBarColor?: string,\n  negativeBarColor?: string,\n  defaultBarColor?: string,\n  height?: number,\n}\n\ntype SVGContainer = Selection<SVGSVGElement, unknown, null, undefined>;\n\nconst createXAxis = ({\n  svgContainer,\n  data,\n  xScale,\n  height,\n  topMargin,\n  tickFontSize = 12,\n  tickColor = 'white',\n  labelFormatter,\n}: {\n  svgContainer: SVGContainer,\n  data: BarChartData,\n  xScale: any,\n  height: number,\n  topMargin: number,\n  tickFontSize?: number,\n  tickColor?: string,\n  labelFormatter: LabelFormatter,\n}) => {\n  const xAxisLabels = data.map(([label]) => label);\n  const xAxis = axisBottom(xScale)\n    .tickFormat((d, i) => (\n      labelFormatter(xAxisLabels[i], i)\n    ))\n    .tickPadding(10);\n\n  const xAxisElement = svgContainer\n    .append('g')\n    .attr('transform', `translate(0, ${height - topMargin})`)\n    .call(xAxis);\n\n  // remove line on xAxis\n  xAxisElement\n    .call((g) => g.select('.domain').remove());\n\n  // remove vertical dashes on xAxis\n  xAxisElement\n    .call((g) => g.selectAll('g line').remove());\n\n  // set styles to xAxis labels\n  xAxisElement\n    .call(\n      (g) => g\n        .selectAll('.tick text')\n        .style('font-size', toCssPxValue(tickFontSize))\n        .style('font-weight', '500')\n        .style('color', tickColor),\n    );\n\n  return {\n    xAxis,\n  };\n};\n\nconst createBars = ({\n  svgContainer,\n  data,\n  xScale,\n  yScale,\n  borderRadius,\n  defaultColor,\n  positiveColor,\n  negativeColor,\n  labelGap,\n  labelFormatter,\n  barAnimationDuration = 300,\n  nameColor,\n}: {\n  svgContainer: SVGContainer;\n  data: BarChartData;\n  xScale: any;\n  yScale: ScaleLinear<number, number, any>;\n  borderRadius: number;\n  positiveColor: string;\n  negativeColor: string;\n  defaultColor: string;\n  labelGap: number;\n  labelFormatter: LabelFormatter;\n  nameColor: string;\n  barAnimationDuration?: number;\n}) => {\n  const computeBarHeight = (\n    value: number,\n  ) => (\n    /* leave space for label */\n    subtractRight(20, yScale(toAbsolute(value)))\n  );\n\n  const bars = svgContainer\n    .selectChildren<SVGRectElement, number>('rect')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr('width', xScale.bandwidth())\n    .attr('height', ([, value]) => (\n      Math.max(\n        computeBarHeight(value),\n        20,\n      )\n    ))\n    .attr('x', (d, i) => xScale(i) as number)\n    .attr('y', ([, value]) => {\n      const [, scaleHeight] = yScale.range();\n\n      const normalizedHeight = Math.max(20, computeBarHeight(value));\n\n      return subtract(\n        scaleHeight,\n        normalizedHeight,\n      );\n    })\n    .attr('rx', borderRadius)\n    .attr('ry', borderRadius)\n    .attr('fill', ([, value]) => (value === 0 ? defaultColor : (\n      isPositive(value) ? positiveColor : negativeColor\n    )));\n\n  // animate bars\n  bars\n    .attr('opacity', 0)\n    .style('transform', 'translateY(-120px)')\n    .transition()\n    .duration(barAnimationDuration)\n    .style('transform', 'translateY(0)')\n    .attr('opacity', 1)\n    .delay((d, i) => multiply(data.length - i, 20))\n    .ease();\n\n  const labels = svgContainer\n    .selectChildren<SVGTextElement, number>('text')\n    .data(data)\n    .enter()\n    .append('text')\n    .text(([, value], index) => labelFormatter(value, index))\n    .attr('x', (d, i) => xScale(i) as number + xScale.bandwidth() / 2)\n    .attr('y', ([, value]) => {\n      const [, scaleHeight] = yScale.range();\n\n      const normalizedHeight = Math.max(20, computeBarHeight(value));\n\n      return compose(\n        subtractRight(labelGap),\n        subtractRight(normalizedHeight),\n      )(scaleHeight);\n    })\n    .style('font-size', '12px')\n    .style('font-weight', '500')\n    .style('text-anchor', 'middle')\n    .style('fill', nameColor);\n\n  // animate labels\n  labels\n    .attr('opacity', 0)\n    .style('transform', 'translateY(-300px) scale(0.8)')\n    .transition()\n    .duration(barAnimationDuration)\n    .style('transform', 'translateY(0) scale(1)')\n    .delay((d, i) => multiply(data.length - i, 30))\n    .attr('opacity', 1)\n    .ease();\n\n  return {\n    bars,\n  };\n};\n\nexport const createBarChart = ({\n  container,\n  data,\n  labelGap = 10,\n  minWidthPerBar = 50,\n  barBorderRadius = 5,\n  topMargin = 30,\n  barLabelFormatter = ((value) => value) as LabelFormatter,\n  xAxisLabelFormatter = ((value) => value) as LabelFormatter,\n  barNameColor = 'gray',\n  positiveBarColor = 'steelblue',\n  negativeBarColor = 'red',\n  defaultBarColor = 'black',\n  height = 300,\n}: CreateBarChartProps) => {\n  const numBars = data.length;\n  const width = Math.max(700, multiply(numBars, minWidthPerBar));\n\n  const svgContainer = select(container)\n    .append('svg')\n    .attr('width', width)\n    .attr('height', getRectField('height', container));\n\n  const xScale = scaleBand<number>()\n    .domain(range(data.length))\n    .range([0, width])\n    .padding(0.1)\n    .paddingInner(0.2);\n\n  const yScale = scaleLinear<number>()\n    .domain([0, max(data.map(([, value]) => toAbsolute(value))) as number])\n    .range([0, subtract(height, topMargin)]);\n\n  createXAxis({\n    svgContainer,\n    xScale,\n    height,\n    topMargin,\n    data,\n    labelFormatter: xAxisLabelFormatter,\n  });\n\n  createBars({\n    svgContainer,\n    xScale,\n    yScale,\n    borderRadius: barBorderRadius,\n    positiveColor: positiveBarColor,\n    negativeColor: negativeBarColor,\n    defaultColor: defaultBarColor,\n    labelGap,\n    labelFormatter: barLabelFormatter,\n    nameColor: barNameColor,\n    data,\n  });\n};\n"],"names":["createXAxis","svgContainer","data","xScale","height","topMargin","tickFontSize","tickColor","labelFormatter","xAxisLabels","label","xAxis","axisBottom","d","i","xAxisElement","g","toCssPxValue","createBars","yScale","borderRadius","defaultColor","positiveColor","negativeColor","labelGap","barAnimationDuration","nameColor","computeBarHeight","value","subtractRight","toAbsolute","bars","scaleHeight","normalizedHeight","subtract","isPositive","multiply","index","compose","createBarChart","container","minWidthPerBar","barBorderRadius","barLabelFormatter","xAxisLabelFormatter","barNameColor","positiveBarColor","negativeBarColor","defaultBarColor","numBars","width","select","getRectField","scaleBand","range","scaleLinear","max"],"mappings":"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"}