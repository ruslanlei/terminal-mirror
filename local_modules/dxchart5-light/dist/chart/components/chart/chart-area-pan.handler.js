/*
 * Copyright (C) 2002 - 2023 Devexperts LLC
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import{merge as T}from"rxjs";import{throttleTime as v}from"rxjs/operators";import{VIEWPORT_ANIMATION_ID as f}from"../../animation/canvas-animation";import{CHART_UUID as P,CanvasElement as l}from"../../canvas/canvas-bounds-container";import{ChartBaseElement as X}from"../../model/chart-base-element";import{MainCanvasTouchHandler as A}from"../../inputhandlers/main-canvas-touch.handler";import{pixelsToUnits as u}from"../../model/scaling/viewport.model";import{deviceDetector as H}from"../../utils/device/device-detector.utils";import{getTouchpadSensitivity as M,touchpadDetector as Y}from"../../utils/device/touchpad.utils";import{DragNDropXComponent as w}from"../dran-n-drop_helper/drag-n-drop-x.component";import{DragNDropYComponent as x}from"../dran-n-drop_helper/drag-n-drop-y.component";export class ChartAreaPanHandler extends X{constructor(t,s,e,i,a,n,o,m){super(),this.bus=t,this.config=s,this.scaleModel=e,this.mainCanvasParent=i,this.canvasInputListener=a,this.canvasBoundsContainer=n,this.canvasAnimation=o,this.chartPanComponent=m,this.currentPoint={x:0,y:0},this.xDraggedCandlesDelta=0,this.lastXStart=0,this.lastYStart=0,this.wheelTrottleTime=15,this.zoomXHandler=r=>{const h=Y(r),c=r.deltaY<0,p=h?M(this.config):this.config.scale.zoomSensitivity;if(this.config.scale.zoomToCursor){const S=this.canvasBoundsContainer.getBounds(l.CANVAS).width,C=r.offsetX/S;this.scaleModel.zoomXToPercent(C,c,!1,p)}else this.scaleModel.zoomXToEnd(c,p);this.bus.fireDraw()},this.onXDragStart=()=>{this.canvasAnimation.forceStopAnimation(f),this.xDraggedCandlesDelta=0,this.lastXStart=this.scaleModel.xStart},this.onXDragTick=r=>{const{delta:h}=r;this.currentPoint.x=h;const c=u(h,this.scaleModel.zoomX);this.scaleModel.moveXStart(this.lastXStart-c),this.bus.fireDraw()},this.touchHandler=new A(this.scaleModel,this.canvasInputListener,this.mainCanvasParent);const D=this.canvasBoundsContainer.getBoundsHitTest(l.PANE_UUID(P)),g=this.canvasBoundsContainer.getBoundsHitTest(l.ALL_PANES);this.registerChartYPanHandler(this.scaleModel,D);const b=new w(g,{onDragStart:this.onXDragStart,onDragTick:this.onXDragTick},this.canvasInputListener,this.chartPanComponent,{disableChartPanning:!1});this.addChildEntity(b)}doActivate(){super.doActivate();const t=this.canvasBoundsContainer.getBoundsHitTest(l.ALL_PANES);this.addRxSubscription(T(this.canvasInputListener.observeWheel(t),this.canvasInputListener.observePinch(t)).pipe(v(this.wheelTrottleTime)).subscribe(this.zoomXHandler)),this.addRxSubscription(this.canvasInputListener.observeScrollGesture().pipe(v(this.wheelTrottleTime)).subscribe(s=>{let e=-1;const i=H();(i==="apple"||i==="mobile")&&(e=1);let a=0,n=0;if(a+=s.deltaX*e,n+=s.deltaY*-e,a!==0&&Math.abs(a)>Math.abs(n)){const o=u(a,this.scaleModel.zoomX);this.scaleModel.moveXStart(this.scaleModel.xStart-o)}else n!==0&&Math.abs(n)>Math.abs(a)&&this.zoomXHandler(s);this.bus.fireDraw()})),this.touchHandler.activate(),this.addSubscription(this.touchHandler.deactivate.bind(this.touchHandler))}registerChartYPanHandler(t,s){const e=()=>{this.canvasAnimation.forceStopAnimation(f),this.currentPoint={x:0,y:0},this.lastYStart=t.yStart},i=n=>{const{delta:o}=n;if(this.currentPoint.y=o,t.state.auto)shouldDisableAutoScale(this.currentPoint,t.state.autoScaleDisableOnDrag)&&t.autoScale(!1);else{const m=u(t.state.inverse?-o:o,t.zoomY);t.moveYStart(this.lastYStart+m)}},a=new x(s,{onDragTick:i,onDragStart:e},this.canvasInputListener,this.chartPanComponent,{disableChartPanning:!1});return this.addChildEntity(a),a}}export const shouldDisableAutoScale=(d,t)=>{if(!t.enabled)return!1;const s=Math.abs(d.y),e=Math.pow(Math.pow(Math.abs(d.x),2)+Math.pow(s,2),.5),i=Math.abs(Math.acos(s/e));return s>t.yDiff&&i<t.edgeAngle};
