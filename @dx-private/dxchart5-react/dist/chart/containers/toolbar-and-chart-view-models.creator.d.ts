/** Copyright Â©2023 Devexperts LLC.
All rights reserved. Any unauthorized use will constitute an infringement of copyright.
In case of any questions regarding types of use, please contact legal@devexperts.com.
This notice must remain intact.
**/
import { option } from 'fp-ts';
import { Sink } from '../../utils/sink';
import { ChartWithModules } from '../components/canvas-chart-renderer/chart-with-modules';
import { DrawingsConfig } from '../model/drawing.model';
import { AggregationPeriodViewModel } from '../view-models/aggregation-period.view-model';
import { ChartConfiguratorViewModel } from '../view-models/chart-configurator.view-model';
import { ChartDataViewModel } from '../view-models/chart-data.view-model';
import { ChartLegendViewModel } from '../view-models/chart-legend.view-model';
import { ChartPaneViewModel } from '../view-models/chart-pane.view-model';
import { ChartSessionsViewModel } from '../view-models/chart-sessions.view-model';
import { ChartTypeViewModel } from '../view-models/chart-type.view-model';
import { CompareChartViewModel } from '../view-models/compare-chart.view-model';
import { ChartDrawingViewModel } from '../view-models/drawing.view-model';
import { DxScriptEditViewModel } from '../view-models/dx-script-edit.view-model';
import { InstrumentSelectorViewModel } from '../view-models/instrument-selector.view-model';
import { ChartLayersViewModel } from '../view-models/layers/chart-layers.view-model';
import { DrawingGroupsViewModel } from '../view-models/layers/drawing-groups.view-model';
import { DataLoaderVM } from '../view-models/loading/data-loader.vm';
import { ChartInfo } from '../view-models/multi-chart.view-model';
import { NewsViewModel } from '../view-models/news/news.view-model';
import { StudiesSettingsViewModel } from '../view-models/studies-settings.view-model';
import { TimeFrameViewModel } from '../view-models/timeframe.view-model';
import { YAxisConfiguratorViewModel } from '../view-models/yaxis-configurator.view-model';
import { OrderEntryViewModel } from '../view-models/trading/order-entry.view-model';
import { TradingCoreViewModel } from '../view-models/trading/trading-core.view-model';
import { TradingViewModel } from '../view-models/trading/trading.view-model';
/**
 * Creates common VM's for toolbar, sidebar and main chart containers.
 */
export declare const ToolbarAndChartViewModelsCreator: import("../../context/context2").Context<Record<"chartDataProvider", import("../../providers/chart-data-provider").ChartDataProvider> & Record<"symbolSuggestProvider", import("../../providers/symbol-suggest-provider").SymbolSuggestProvider> & Record<"eventsDataProvider", import("../../providers/events-data-provider").EventsDataProvider> & Record<"dxScriptRunner", import("../../providers/dx-script-provider").DxScriptRunner> & Record<"dxScriptProvider", import("../../providers/dx-script-provider").DxScriptProvider> & Record<"dxStudiesProvider", import("../../providers/studies/dx-studies-provider").DxStudiesProvider> & Record<"tradingSessionsProvider", import("../../providers/sessions/trading-sessions-provider").TradingSessionsProvider> & Record<"orderProvider", import("../../providers/trading/order.provider").OrderProvider> & Record<"positionProvider", import("../../providers/trading/position.provider").PositionProvider> & Record<"chartSharingProvider", import("../../providers/chart-sharing-provider").ChartSharingProvider> & Record<"indicatorsTemplateProvider", import("../../providers/indicator-templates-provider").IndicatorsTemplateProvider> & Record<"userDataProvider", import("../../providers/user-data-provider").UserDataProvider> & Record<"layoutProvider", import("../../providers/layout-provider").LayoutProvider> & Omit<Record<"multiChartDataService", import("../services/multichart-data.service").MultiChartDataService> & Record<"utilityDataService", import("../services/utility-data.service").UtilityDataService> & Record<"chartInstance", ChartWithModules> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"aggregationPeriodViewModel", AggregationPeriodViewModel> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"instrumentSelectorViewModel", InstrumentSelectorViewModel> & Record<"dataLoaderVM", DataLoaderVM> & Record<"initialLoaderVM", import("../view-models/loading/initial-loader.vm").InitialLoaderVM> & Record<"initialInstrument", option.Option<string>> & Record<"initialExtendedHours", boolean> & Record<"initialPriceType", "mark" | "bid" | "ask" | "last"> & Record<"chartId", string> & Record<"notificationVM", import("../view-models/notification.view-model").NotificationViewModel> & Record<"localization", import("../../config/localization/localization").Localization>, "initialInstrument" | "instrumentSelectorViewModel" | "initialExtendedHours" | "initialPriceType" | "aggregationPeriodViewModel" | "dataLoaderVM"> & Record<"chartInstance", ChartWithModules> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartId", string> & Omit<Record<"userDataViewModel", import("../view-models/user-data.view-model").UserDataViewModel> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"initialAggregationPeriod", import("../model/aggregation.model").AggregationPeriod> & Record<"localization", import("../../config/localization/localization").Localization> & Record<"chartId", string>, "initialAggregationPeriod"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"chartTypeViewModel", ChartTypeViewModel> & Record<"aggregationPeriodViewModel", AggregationPeriodViewModel> & Record<"chartConfig", import("../components/canvas-chart-renderer/chart-with-modules").FullChartConfigWithModules> & Record<"themeSwitcherViewModel", import("../view-models/theme-switcher.view-model").ThemeSwitcherViewModel> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"notificationVM", import("../view-models/notification.view-model").NotificationViewModel> & Record<"localization", import("../../config/localization/localization").Localization> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"initialChartReactSettings", import("../model/chart.model").ChartReactSettings> & Record<"initialChartSettings", import("../model/chart.model").ChartSettings> & Record<"chartId", string>, "chartId" | "aggregationPeriodViewModel" | "chartDataViewModel" | "chartTypeViewModel" | "initialChartSettings"> & Omit<Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"chartInstance", ChartWithModules> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"rootElement", HTMLDivElement> & Record<"initialGeneralSettings", import("../model/chart.model").ChartSettings> & Record<"chartId", string> & Record<"chartConfig", import("../components/canvas-chart-renderer/chart-with-modules").FullChartConfigWithModules>, "chartId" | "chartDataViewModel" | "chartConfiguratorViewModel" | "initialGeneralSettings"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"initialCompareInstruments", import("../model/chart.model").CompareInstrument[]> & Record<"instrumentSelectorViewModel", InstrumentSelectorViewModel> & Record<"chartId", string>, "instrumentSelectorViewModel" | "chartDataViewModel" | "initialCompareInstruments"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"studiesDataProvider", import("../../providers/studies/studies-data-provider").StudiesDataProvider> & Record<"dxScriptEditViewModel", DxScriptEditViewModel> & Record<"dxStudiesProvider", import("../../providers/studies/dx-studies-provider").DxStudiesProvider> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"localization", import("../../config/localization/localization").Localization> & Record<"chartId", string>, "chartId" | "chartConfiguratorViewModel" | "dxScriptEditViewModel" | "studiesDataProvider"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartTypesConfig", import("../model/chart.model").ChartTypesConfig> & Record<"initialChartType", "trend" | "line" | "area" | "baseline" | "histogram" | "equivolume" | "scatterPlot" | "candle" | "heikinAshi" | "bar" | "hollow"> & Record<"chartId", string>, "chartId" | "initialChartType"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"iconsPool", Readonly<Record<string, import("../../config/icons-pool").IconDefinition>>> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"notificationVM", import("../view-models/notification.view-model").NotificationViewModel> & Record<"localization", import("../../config/localization/localization").Localization> & Record<"userDataViewModel", import("../view-models/user-data.view-model").UserDataViewModel> & Record<"actionsHistoryVM", import("../view-models/actions/actions-history.vm").ActionsHistoryVM> & Record<"initialDrawings", Record<string, import("@dx-private/dxchart5-modules/dist/drawings/DrawingsConfig").Drawing<"line" | "horizontal_line" | "horizontal_ray" | "vertical_line" | "extended_line" | "ellipse" | "pitchfork" | "ray" | "curve" | "arc" | "info_line" | "brush" | "path" | "date_price_range" | "date_range" | "price_range" | "highlighter" | "icon" | "rectangle" | "gann_box" | "gann_square" | "fibonacci_ark" | "fibonacci_circles" | "fibonacci_rays" | "gann_fan" | "trend_channel" | "multichannel" | "fibonacci_retracements" | "text" | "callout" | "price_label" | "magnifying_tool_rectangle" | "magnifying_tool_time_range" | "magnifying_tool_time_range_wheel" | "vertical_arrow_up" | "vertical_arrow_down" | "arrow" | "elliott_wave" | "elliott_correction_wave" | "fibonacci_projection" | "fibonacci_channel" | "fibonacci_time_zones" | "regression_trend" | "fibonacci_spiral" | "cycle_brackets" | "fibonacci_time_extension" | "fibonacci_time_ratios">[]>> & Record<"availableDrawings", readonly ("line" | "horizontal_line" | "horizontal_ray" | "vertical_line" | "extended_line" | "ellipse" | "pitchfork" | "ray" | "curve" | "arc" | "info_line" | "brush" | "path" | "date_price_range" | "date_range" | "price_range" | "highlighter" | "icon" | "rectangle" | "gann_box" | "gann_square" | "fibonacci_ark" | "fibonacci_circles" | "fibonacci_rays" | "gann_fan" | "trend_channel" | "multichannel" | "fibonacci_retracements" | "text" | "callout" | "price_label" | "magnifying_tool_rectangle" | "magnifying_tool_time_range" | "magnifying_tool_time_range_wheel" | "vertical_arrow_up" | "vertical_arrow_down" | "arrow" | "elliott_wave" | "elliott_correction_wave" | "fibonacci_projection" | "fibonacci_channel" | "fibonacci_time_zones" | "regression_trend" | "fibonacci_spiral" | "cycle_brackets" | "fibonacci_time_extension" | "fibonacci_time_ratios")[]> & Record<"initialConfig", DrawingsConfig<"line" | "horizontal_line" | "horizontal_ray" | "vertical_line" | "extended_line" | "ellipse" | "pitchfork" | "ray" | "curve" | "arc" | "info_line" | "brush" | "path" | "date_price_range" | "date_range" | "price_range" | "highlighter" | "icon" | "rectangle" | "gann_box" | "gann_square" | "fibonacci_ark" | "fibonacci_circles" | "fibonacci_rays" | "gann_fan" | "trend_channel" | "multichannel" | "fibonacci_retracements" | "text" | "callout" | "price_label" | "magnifying_tool_rectangle" | "magnifying_tool_time_range" | "magnifying_tool_time_range_wheel" | "vertical_arrow_up" | "vertical_arrow_down" | "arrow" | "elliott_wave" | "elliott_correction_wave" | "fibonacci_projection" | "fibonacci_channel" | "fibonacci_time_zones" | "regression_trend" | "fibonacci_spiral" | "cycle_brackets" | "fibonacci_time_extension" | "fibonacci_time_ratios">> & Record<"chartId", string> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig>, "initialDrawings" | "availableDrawings" | "initialConfig" | "chartId"> & Omit<Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"aggregationPeriodViewModel", AggregationPeriodViewModel> & Record<"chartInstance", ChartWithModules> & Record<"tradingSessionsProvider", import("../../providers/sessions/trading-sessions-provider").TradingSessionsProvider>, "aggregationPeriodViewModel" | "chartDataViewModel" | "chartConfiguratorViewModel"> & Omit<Record<"chartDataViewModel", ChartDataViewModel> & Record<"compareChartViewModel", CompareChartViewModel> & Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"studiesSettingsViewModel", StudiesSettingsViewModel> & Record<"chartTypeViewModel", ChartTypeViewModel> & Record<"chartInstance", ChartWithModules> & Record<"aggregationPeriodViewModel", AggregationPeriodViewModel> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig>, "aggregationPeriodViewModel" | "chartDataViewModel" | "chartTypeViewModel" | "chartConfiguratorViewModel" | "studiesSettingsViewModel" | "compareChartViewModel"> & Omit<Record<"chartId", string> & Record<"drawingViewModel", ChartDrawingViewModel> & Record<"chartInstance", ChartWithModules> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"initialLayerItems", Record<string, import("../model/chart-layers.model").LayerItem[]>> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"localization", import("../../config/localization/localization").Localization>, "chartInstance" | "drawingViewModel" | "chartDataViewModel" | "initialLayerItems"> & Omit<Record<"chartLayersViewModel", ChartLayersViewModel> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"drawingViewModel", ChartDrawingViewModel> & Record<"localization", import("../../config/localization/localization").Localization> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"initialSelectedGroup", string | undefined> & Record<"chartId", string>, "chartId" | "drawingViewModel" | "chartDataViewModel" | "chartLayersViewModel" | "initialSelectedGroup"> & Record<"localInstrumentStore", import("../stores/instrument.store").LocalInstrumentStore> & Record<"drawingsConfig", DrawingsConfig<"line" | "horizontal_line" | "horizontal_ray" | "vertical_line" | "extended_line" | "ellipse" | "pitchfork" | "ray" | "curve" | "arc" | "info_line" | "brush" | "path" | "date_price_range" | "date_range" | "price_range" | "highlighter" | "icon" | "rectangle" | "gann_box" | "gann_square" | "fibonacci_ark" | "fibonacci_circles" | "fibonacci_rays" | "gann_fan" | "trend_channel" | "multichannel" | "fibonacci_retracements" | "text" | "callout" | "price_label" | "magnifying_tool_rectangle" | "magnifying_tool_time_range" | "magnifying_tool_time_range_wheel" | "vertical_arrow_up" | "vertical_arrow_down" | "arrow" | "elliott_wave" | "elliott_correction_wave" | "fibonacci_projection" | "fibonacci_channel" | "fibonacci_time_zones" | "regression_trend" | "fibonacci_spiral" | "cycle_brackets" | "fibonacci_time_extension" | "fibonacci_time_ratios">> & Record<"dxScriptEditViewModel", DxScriptEditViewModel> & Omit<Record<"newsDataProvider", import("../../providers/news-data-provider").NewsDataProvider> & Record<"chartInstance", ChartWithModules> & Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"chartDataViewModel", ChartDataViewModel>, "chartDataViewModel" | "chartConfiguratorViewModel"> & Omit<Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"chartInstance", ChartWithModules> & Record<"chartId", string>, "chartId"> & Omit<Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"chartInstance", ChartWithModules> & Omit<Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"chartInstance", ChartWithModules> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"tradingCoreViewModel", TradingCoreViewModel> & Record<"yAxisConfiguratorViewModel", YAxisConfiguratorViewModel> & Record<"chartDataViewModel", ChartDataViewModel>, "tradingCoreViewModel"> & Omit<Record<"chartInstance", ChartWithModules> & Record<"orderProvider", import("../../providers/trading/order.provider").OrderProvider> & Record<"positionProvider", import("../../providers/trading/position.provider").PositionProvider> & Record<"chartDataViewModel", ChartDataViewModel> & Record<"chartReactConfig", import("../../config/chart-react-config").ChartReactConfig> & Record<"multiChartViewModel", import("../view-models/multi-chart.view-model").MultiChartViewModel> & Record<"orderEntryViewModel", OrderEntryViewModel> & Record<"tradingCoreViewModel", TradingCoreViewModel> & Record<"yAxisConfiguratorViewModel", YAxisConfiguratorViewModel> & Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"chartId", string>, "tradingCoreViewModel" | "orderEntryViewModel">, "chartInstance" | "chartDataViewModel" | "chartConfiguratorViewModel" | "yAxisConfiguratorViewModel">, (chartInfo: ChartInfo) => Sink<ViewModels>>;
export interface ViewModels {
    readonly chartDataViewModel: ChartDataViewModel;
    readonly chartConfiguratorViewModel: ChartConfiguratorViewModel;
    readonly aggregationPeriodViewModel: AggregationPeriodViewModel;
    readonly timeFrameViewModel: TimeFrameViewModel;
    readonly compareChartViewModel: CompareChartViewModel;
    readonly yAxisConfiguratorViewModel: YAxisConfiguratorViewModel;
    readonly studiesSettingsViewModel: StudiesSettingsViewModel;
    readonly chartTypeViewModel: ChartTypeViewModel;
    readonly drawingViewModel: ChartDrawingViewModel;
    readonly chartLegendVM: ChartLegendViewModel;
    readonly chartSessionsViewModel: ChartSessionsViewModel;
    readonly chartLayersViewModel: ChartLayersViewModel;
    readonly drawingGroupsViewModel: DrawingGroupsViewModel;
    readonly instrumentSelectorViewModel: InstrumentSelectorViewModel;
    readonly newsViewModel: NewsViewModel;
    readonly chartPaneViewModel: ChartPaneViewModel;
    readonly dataLoaderVM: DataLoaderVM;
    readonly tradingVM: TradingViewModel;
    readonly tradingCoreVM: TradingCoreViewModel;
    readonly orderEntryVM: OrderEntryViewModel;
}
export declare const ChartReactApiViewModels: import("../../context/context2").Context<Record<"chartDataViewModel", ChartDataViewModel> & Record<"chartConfiguratorViewModel", ChartConfiguratorViewModel> & Record<"compareChartViewModel", CompareChartViewModel> & Record<"yAxisConfiguratorViewModel", YAxisConfiguratorViewModel> & Record<"studiesSettingsViewModel", StudiesSettingsViewModel> & Record<"chartTypeViewModel", ChartTypeViewModel> & Record<"drawingViewModel", ChartDrawingViewModel> & Record<"chartLegendVM", ChartLegendViewModel> & Record<"chartLayersViewModel", ChartLayersViewModel> & Record<"aggregationPeriodViewModel", AggregationPeriodViewModel> & Record<"drawingGroupsViewModel", DrawingGroupsViewModel> & Record<"tradingViewModel", TradingViewModel> & Record<"tradingCoreViewModel", TradingCoreViewModel> & Record<"orderEntryViewModel", OrderEntryViewModel>, {
    chartDataViewModel: ChartDataViewModel;
    chartConfiguratorViewModel: ChartConfiguratorViewModel;
    compareChartViewModel: CompareChartViewModel;
    yAxisConfiguratorViewModel: YAxisConfiguratorViewModel;
    studiesSettingsViewModel: StudiesSettingsViewModel;
    chartTypeViewModel: ChartTypeViewModel;
    drawingViewModel: ChartDrawingViewModel;
    chartLegendVM: ChartLegendViewModel;
    chartLayersViewModel: ChartLayersViewModel;
    aggregationPeriodViewModel: AggregationPeriodViewModel;
    drawingGroupsViewModel: DrawingGroupsViewModel;
    tradingViewModel: TradingViewModel;
    tradingCoreViewModel: TradingCoreViewModel;
    orderEntryViewModel: OrderEntryViewModel;
}>;
